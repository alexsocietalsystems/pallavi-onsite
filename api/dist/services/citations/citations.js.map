{
  "version": 3,
  "sources": ["../../../src/services/citations/citations.ts"],
  "sourcesContent": ["import type {\n  QueryResolvers,\n  MutationResolvers,\n  CitationRelationResolvers,\n} from 'types/graphql'\n\nimport { db } from 'src/lib/db'\n\nexport const citations: QueryResolvers['citations'] = () => {\n  console.log(\"Getting called 123\")\n  return db.citation.findMany()\n}\n\nexport const citation: QueryResolvers['citation'] = ({ id }) => {\n  return db.citation.findUnique({\n    where: { id },\n  })\n}\n\nexport const getCitationByNumberAndDriverName: QueryResolvers['getCitationByNumberAndDriverName'] =  async ({ citationNumber, driverName }) => {\n  console.log(\"Getting called\")\n  const citation_num = await db.citation.findFirst({\n    where: { \n      citation_number: citationNumber },\n  })\n  console.log(citation_num)\n  if(citation_num == null){\n    return { citation: null, citationExists: false }\n  }\n  const citation =  db.citation.findFirst({\n    where: {\n      citation_number: citationNumber,\n      driver_name: driverName,\n    },\n    include: {\n      court: true,\n    },\n  });\n  return { citation: citation, citationExists: true }\n};\n\nexport const createCitation: MutationResolvers['createCitation'] = ({\n  input,\n}) => {\n  return db.citation.create({\n    data: input,\n  })\n}\n\nexport const updateCitation: MutationResolvers['updateCitation'] = ({\n  id,\n  input,\n}) => {\n  return db.citation.update({\n    data: input,\n    where: { id },\n  })\n}\n\nexport const deleteCitation: MutationResolvers['deleteCitation'] = ({ id }) => {\n  return db.citation.delete({\n    where: { id },\n  })\n}\n\nexport const Citation: CitationRelationResolvers = {\n  court: (_obj, { root }) => {\n    return db.citation.findUnique({ where: { id: root?.id } }).court()\n  },\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;gBAAW;AAEJ,MAAMA,YAAyCA,MAAM;AAC1DC,UAAQC,IAAI,oBAAoB;AAChC,SAAOC,aAAGC,SAASC,SAAS;AAC9B;AAEO,MAAMD,WAAuCA,CAAC;EAAEE;AAAG,MAAM;AAC9D,SAAOH,aAAGC,SAASG,WAAW;IAC5BC,OAAO;MAAEF;IAAG;EACd,CAAC;AACH;AAEO,MAAMG,mCAAwF,OAAO;EAAEC;EAAgBC;AAAW,MAAM;AAC7IV,UAAQC,IAAI,gBAAgB;AAC5B,QAAMU,eAAe,MAAMT,aAAGC,SAASS,UAAU;IAC/CL,OAAO;MACLM,iBAAiBJ;IAAe;EACpC,CAAC;AACDT,UAAQC,IAAIU,YAAY;AACxB,MAAGA,gBAAgB,MAAK;AACtB,WAAO;MAAER,UAAU;MAAMW,gBAAgB;IAAM;EACjD;AACA,QAAMX,YAAYD,aAAGC,SAASS,UAAU;IACtCL,OAAO;MACLM,iBAAiBJ;MACjBM,aAAaL;IACf;IACAM,SAAS;MACPC,OAAO;IACT;EACF,CAAC;AACD,SAAO;IAAEd,UAAUA;IAAUW,gBAAgB;EAAK;AACpD;AAEO,MAAMI,iBAAsDA,CAAC;EAClEC;AACF,MAAM;AACJ,SAAOjB,aAAGC,SAASiB,OAAO;IACxBC,MAAMF;EACR,CAAC;AACH;AAEO,MAAMG,iBAAsDA,CAAC;EAClEjB;EACAc;AACF,MAAM;AACJ,SAAOjB,aAAGC,SAASoB,OAAO;IACxBF,MAAMF;IACNZ,OAAO;MAAEF;IAAG;EACd,CAAC;AACH;AAEO,MAAMmB,iBAAsDA,CAAC;EAAEnB;AAAG,MAAM;AAC7E,SAAOH,aAAGC,SAASsB,OAAO;IACxBlB,OAAO;MAAEF;IAAG;EACd,CAAC;AACH;AAEO,MAAMqB,WAAsC;EACjDT,OAAOA,CAACU,MAAM;IAAEC;EAAK,MAAM;AACzB,WAAO1B,aAAGC,SAASG,WAAW;MAAEC,OAAO;QAAEF,IAAIuB,MAAMvB;MAAG;IAAE,CAAC,EAAEY,MAAM;EACnE;AACF;",
  "names": ["citations", "console", "log", "db", "citation", "findMany", "id", "findUnique", "where", "getCitationByNumberAndDriverName", "citationNumber", "driverName", "citation_num", "findFirst", "citation_number", "citationExists", "driver_name", "include", "court", "createCitation", "input", "create", "data", "updateCitation", "update", "deleteCitation", "delete", "Citation", "_obj", "root"]
}
